["^ ","~:use-macros",null,"~:excludes",["~#set",["~$remove","~$replace","~$next"]],"~:name","~$clojure.zip","~:imports",null,"~:requires",null,"~:uses",null,"~:defs",["^ ","~$rightmost",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/xuelin/dev/cloudxmark/resources/public/js/clojure/zip.cljs","~:line",142,"~:column",7,"~:end-line",142,"~:end-column",16,"~:arglists",["~#list",["~$quote",["^E",[["~$loc"]]]]],"~:doc","Returns the loc of the rightmost sibling of the node at this loc, or self"],"^6","~$clojure.zip/rightmost","~:variadic",false,"^?","js/clojure/zip.cljs","^C",16,"~:method-params",["^E",[["^G"]]],"~:protocol-impl",null,"~:arglists-meta",["^E",[null,null]],"^A",1,"^@",142,"^B",142,"~:max-fixed-arity",1,"~:fn-var",true,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Returns the loc of the rightmost sibling of the node at this loc, or self"],"~$insert-child",["^ ","^=",null,"^>",["^ ","^?","/home/xuelin/dev/cloudxmark/resources/public/js/clojure/zip.cljs","^@",194,"^A",7,"^B",194,"^C",19,"^D",["^E",["^F",["^E",[["^G","~$item"]]]]],"^H","Inserts the item as the leftmost child of the node at this loc,\n  without moving"],"^6","~$clojure.zip/insert-child","^J",false,"^?","js/clojure/zip.cljs","^C",19,"^K",["^E",[["^G","^Q"]]],"^L",null,"^M",["^E",[null,null]],"^A",1,"^@",194,"^B",194,"^N",2,"^O",true,"^D",["^E",["^F",["^E",[["^G","^Q"]]]]],"^H","Inserts the item as the leftmost child of the node at this loc,\n  without moving"],"~$left",["^ ","^=",null,"^>",["^ ","^?","/home/xuelin/dev/cloudxmark/resources/public/js/clojure/zip.cljs","^@",150,"^A",7,"^B",150,"^C",11,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Returns the loc of the left sibling of the node at this loc, or nil"],"^6","~$clojure.zip/left","^J",false,"^?","js/clojure/zip.cljs","^C",11,"^K",["^E",[["^G"]]],"^L",null,"^M",["^E",[null,null]],"^A",1,"^@",150,"^B",150,"^N",1,"^O",true,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Returns the loc of the left sibling of the node at this loc, or nil"],"~$path",["^ ","^=",null,"^>",["^ ","^?","/home/xuelin/dev/cloudxmark/resources/public/js/clojure/zip.cljs","^@",82,"^A",7,"^B",82,"^C",11,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Returns a seq of nodes leading to this loc"],"^6","~$clojure.zip/path","^J",false,"^?","js/clojure/zip.cljs","^C",11,"^K",["^E",[["^G"]]],"^L",null,"^M",["^E",[null,null]],"^A",1,"^@",82,"^B",82,"^N",1,"^O",true,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Returns a seq of nodes leading to this loc"],"~$leftmost",["^ ","^=",null,"^>",["^ ","^?","/home/xuelin/dev/cloudxmark/resources/public/js/clojure/zip.cljs","^@",157,"^A",7,"^B",157,"^C",15,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Returns the loc of the leftmost sibling of the node at this loc, or self"],"^6","~$clojure.zip/leftmost","^J",false,"^?","js/clojure/zip.cljs","^C",15,"^K",["^E",[["^G"]]],"^L",null,"^M",["^E",[null,null]],"^A",1,"^@",157,"^B",157,"^N",1,"^O",true,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Returns the loc of the leftmost sibling of the node at this loc, or self"],"~$append-child",["^ ","^=",null,"^>",["^ ","^?","/home/xuelin/dev/cloudxmark/resources/public/js/clojure/zip.cljs","^@",200,"^A",7,"^B",200,"^C",19,"^D",["^E",["^F",["^E",[["^G","^Q"]]]]],"^H","Inserts the item as the rightmost child of the node at this loc,\n  without moving"],"^6","~$clojure.zip/append-child","^J",false,"^?","js/clojure/zip.cljs","^C",19,"^K",["^E",[["^G","^Q"]]],"^L",null,"^M",["^E",[null,null]],"^A",1,"^@",200,"^B",200,"^N",2,"^O",true,"^D",["^E",["^F",["^E",[["^G","^Q"]]]]],"^H","Inserts the item as the rightmost child of the node at this loc,\n  without moving"],"~$branch?",["^ ","^=",null,"^>",["^ ","^?","/home/xuelin/dev/cloudxmark/resources/public/js/clojure/zip.cljs","^@",64,"^A",7,"^B",64,"^C",14,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Returns true if the node at loc is a branch"],"^6","~$clojure.zip/branch?","^J",false,"^?","js/clojure/zip.cljs","^C",14,"^K",["^E",[["^G"]]],"^L",null,"^M",["^E",[null,null]],"^A",1,"^@",64,"^B",64,"^N",1,"^O",true,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Returns true if the node at loc is a branch"],"~$children",["^ ","^=",null,"^>",["^ ","^?","/home/xuelin/dev/cloudxmark/resources/public/js/clojure/zip.cljs","^@",69,"^A",7,"^B",69,"^C",15,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Returns a seq of the children of node at loc, which must be a branch"],"^6","~$clojure.zip/children","^J",false,"^?","js/clojure/zip.cljs","^C",15,"^K",["^E",[["^G"]]],"^L",null,"^M",["^E",[null,null]],"^A",1,"^@",69,"^B",69,"^N",1,"^O",true,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Returns a seq of the children of node at loc, which must be a branch"],"^3",["^ ","^=",null,"^>",["^ ","^?","/home/xuelin/dev/cloudxmark/resources/public/js/clojure/zip.cljs","^@",237,"^A",7,"^B",237,"^C",13,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Removes the node at loc, returning the loc that would have preceded\n  it in a depth-first walk."],"^6","~$clojure.zip/remove","^J",false,"^?","js/clojure/zip.cljs","^C",13,"^K",["^E",[["^G"]]],"^L",null,"^M",["^E",[null,null]],"^A",1,"^@",237,"^B",237,"^N",1,"^O",true,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Removes the node at loc, returning the loc that would have preceded\n  it in a depth-first walk."],"~$down",["^ ","^=",null,"^>",["^ ","^?","/home/xuelin/dev/cloudxmark/resources/public/js/clojure/zip.cljs","^@",98,"^A",7,"^B",98,"^C",11,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Returns the loc of the leftmost child of the node at this loc, or\n  nil if no children"],"^6","~$clojure.zip/down","^J",false,"^?","js/clojure/zip.cljs","^C",11,"^K",["^E",[["^G"]]],"^L",null,"^M",["^E",[null,null]],"^A",1,"^@",98,"^B",98,"^N",1,"^O",true,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Returns the loc of the leftmost child of the node at this loc, or\n  nil if no children"],"^4",["^ ","^=",null,"^>",["^ ","^?","/home/xuelin/dev/cloudxmark/resources/public/js/clojure/zip.cljs","^@",183,"^A",7,"^B",183,"^C",14,"^D",["^E",["^F",["^E",[["^G","~$node"]]]]],"^H","Replaces the node at this loc, without moving"],"^6","~$clojure.zip/replace","^J",false,"^?","js/clojure/zip.cljs","^C",14,"^K",["^E",[["^G","^16"]]],"^L",null,"^M",["^E",[null,null]],"^A",1,"^@",183,"^B",183,"^N",2,"^O",true,"^D",["^E",["^F",["^E",[["^G","^16"]]]]],"^H","Replaces the node at this loc, without moving"],"~$zipper",["^ ","^=",null,"^>",["^ ","^?","/home/xuelin/dev/cloudxmark/resources/public/js/clojure/zip.cljs","^@",18,"^A",7,"^B",18,"^C",13,"^D",["^E",["^F",["^E",[["^[","^11","~$make-node","~$root"]]]]],"^H","Creates a new zipper structure. \n\n  branch? is a fn that, given a node, returns true if can have\n  children, even if it currently doesn't.\n\n  children is a fn that, given a branch node, returns a seq of its\n  children.\n\n  make-node is a fn that, given an existing node and a seq of\n  children, returns a new branch node with the supplied children.\n  root is the root node."],"^6","~$clojure.zip/zipper","^J",false,"^?","js/clojure/zip.cljs","^C",13,"^K",["^E",[["^[","^11","^19","^1:"]]],"^L",null,"^M",["^E",[null,null]],"^A",1,"^@",18,"^B",18,"^N",4,"^O",true,"^D",["^E",["^F",["^E",[["^[","^11","^19","^1:"]]]]],"^H","Creates a new zipper structure. \n\n  branch? is a fn that, given a node, returns true if can have\n  children, even if it currently doesn't.\n\n  children is a fn that, given a branch node, returns a seq of its\n  children.\n\n  make-node is a fn that, given an existing node and a seq of\n  children, returns a new branch node with the supplied children.\n  root is the root node."],"~$end?",["^ ","^=",null,"^>",["^ ","^?","/home/xuelin/dev/cloudxmark/resources/public/js/clojure/zip.cljs","^@",232,"^A",7,"^B",232,"^C",11,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Returns true if loc represents the end of a depth-first walk"],"^6","~$clojure.zip/end?","^J",false,"^?","js/clojure/zip.cljs","^C",11,"^K",["^E",[["^G"]]],"^L",null,"^M",["^E",[null,null]],"^A",1,"^@",232,"^B",232,"^N",1,"^O",true,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Returns true if loc represents the end of a depth-first walk"],"~$edit",["^ ","^=",null,"^>",["^ ","^?","/home/xuelin/dev/cloudxmark/resources/public/js/clojure/zip.cljs","^@",189,"^A",7,"^B",189,"^C",11,"^D",["^E",["^F",["^E",[["^G","~$f","~$&","~$args"]]]]],"^H","Replaces the node at this loc with the value of (f node args)","~:top-fn",["^ ","^J",true,"^N",2,"^K",[["^E",["^G","~$f","^1?"]]],"^D",["^E",[["^G","~$f","~$&","^1?"]]],"^M",["^E",[null]]]],"^6","~$clojure.zip/edit","^J",true,"^?","js/clojure/zip.cljs","^C",11,"^1@",["^ ","^J",true,"^N",2,"^K",[["^E",["^G","~$f","^1?"]]],"^D",["^E",[["^G","~$f","~$&","^1?"]]],"^M",["^E",[null]]],"^K",[["^E",["^G","~$f","^1?"]]],"^L",null,"^M",["^E",[null]],"^A",1,"^@",189,"^B",189,"^N",2,"^O",true,"^D",["^E",[["^G","~$f","~$&","^1?"]]],"^H","Replaces the node at this loc with the value of (f node args)"],"^19",["^ ","^=",null,"^>",["^ ","^?","/home/xuelin/dev/cloudxmark/resources/public/js/clojure/zip.cljs","^@",76,"^A",7,"^B",76,"^C",16,"^D",["^E",["^F",["^E",[["^G","^16","^11"]]]]],"^H","Returns a new branch node, given an existing node and new\n  children. The loc is only used to supply the constructor."],"^6","~$clojure.zip/make-node","^J",false,"^?","js/clojure/zip.cljs","^C",16,"^K",["^E",[["^G","^16","^11"]]],"^L",null,"^M",["^E",[null,null]],"^A",1,"^@",76,"^B",76,"^N",3,"^O",true,"^D",["^E",["^F",["^E",[["^G","^16","^11"]]]]],"^H","Returns a new branch node, given an existing node and new\n  children. The loc is only used to supply the constructor."],"~$vector-zip",["^ ","^=",null,"^>",["^ ","^?","/home/xuelin/dev/cloudxmark/resources/public/js/clojure/zip.cljs","^@",42,"^A",7,"^B",42,"^C",17,"^D",["^E",["^F",["^E",[["^1:"]]]]],"^H","Returns a zipper for nested vectors, given a root vector"],"^6","~$clojure.zip/vector-zip","^J",false,"^?","js/clojure/zip.cljs","^C",17,"^K",["^E",[["^1:"]]],"^L",null,"^M",["^E",[null,null]],"^A",1,"^@",42,"^B",42,"^N",1,"^O",true,"^D",["^E",["^F",["^E",[["^1:"]]]]],"^H","Returns a zipper for nested vectors, given a root vector"],"^16",["^ ","^=",null,"^>",["^ ","^?","/home/xuelin/dev/cloudxmark/resources/public/js/clojure/zip.cljs","^@",60,"^A",7,"^B",60,"^C",11,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Returns the node at loc"],"^6","~$clojure.zip/node","^J",false,"^?","js/clojure/zip.cljs","^C",11,"^K",["^E",[["^G"]]],"^L",null,"^M",["^E",[null,null]],"^A",1,"^@",60,"^B",60,"^N",1,"^O",true,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Returns the node at loc"],"~$up",["^ ","^=",null,"^>",["^ ","^?","/home/xuelin/dev/cloudxmark/resources/public/js/clojure/zip.cljs","^@",111,"^A",7,"^B",111,"^C",9,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Returns the loc of the parent of the node at this loc, or nil if at\n  the top"],"^6","~$clojure.zip/up","^J",false,"^?","js/clojure/zip.cljs","^C",9,"^K",["^E",[["^G"]]],"^L",null,"^M",["^E",[null,null]],"^A",1,"^@",111,"^B",111,"^N",1,"^O",true,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Returns the loc of the parent of the node at this loc, or nil if at\n  the top"],"~$insert-right",["^ ","^=",null,"^>",["^ ","^?","/home/xuelin/dev/cloudxmark/resources/public/js/clojure/zip.cljs","^@",174,"^A",7,"^B",174,"^C",19,"^D",["^E",["^F",["^E",[["^G","^Q"]]]]],"^H","Inserts the item as the right sibling of the node at this loc,\n  without moving"],"^6","~$clojure.zip/insert-right","^J",false,"^?","js/clojure/zip.cljs","^C",19,"^K",["^E",[["^G","^Q"]]],"^L",null,"^M",["^E",[null,null]],"^A",1,"^@",174,"^B",174,"^N",2,"^O",true,"^D",["^E",["^F",["^E",[["^G","^Q"]]]]],"^H","Inserts the item as the right sibling of the node at this loc,\n  without moving"],"~$rights",["^ ","^=",null,"^>",["^ ","^?","/home/xuelin/dev/cloudxmark/resources/public/js/clojure/zip.cljs","^@",92,"^A",7,"^B",92,"^C",13,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Returns a seq of the right siblings of this loc"],"^6","~$clojure.zip/rights","^J",false,"^?","js/clojure/zip.cljs","^C",13,"^K",["^E",[["^G"]]],"^L",null,"^M",["^E",[null,null]],"^A",1,"^@",92,"^B",92,"^N",1,"^O",true,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Returns a seq of the right siblings of this loc"],"^1:",["^ ","^=",null,"^>",["^ ","^?","/home/xuelin/dev/cloudxmark/resources/public/js/clojure/zip.cljs","^@",124,"^A",7,"^B",124,"^C",11,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","zips all the way up and returns the root node, reflecting any\n changes."],"^6","~$clojure.zip/root","^J",false,"^?","js/clojure/zip.cljs","^C",11,"^K",["^E",[["^G"]]],"^L",null,"^M",["^E",[null,null]],"^A",1,"^@",124,"^B",124,"^N",1,"^O",true,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","zips all the way up and returns the root node, reflecting any\n changes."],"^5",["^ ","^=",null,"^>",["^ ","^?","/home/xuelin/dev/cloudxmark/resources/public/js/clojure/zip.cljs","^@",206,"^A",7,"^B",206,"^C",11,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Moves to the next loc in the hierarchy, depth-first. When reaching\n  the end, returns a distinguished loc detectable via end?. If already\n  at the end, stays there."],"^6","~$clojure.zip/next","^J",false,"^?","js/clojure/zip.cljs","^C",11,"^K",["^E",[["^G"]]],"^L",null,"^M",["^E",[null,null]],"^A",1,"^@",206,"^B",206,"^N",1,"^O",true,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Moves to the next loc in the hierarchy, depth-first. When reaching\n  the end, returns a distinguished loc detectable via end?. If already\n  at the end, stays there."],"~$seq-zip",["^ ","^=",null,"^>",["^ ","^?","/home/xuelin/dev/cloudxmark/resources/public/js/clojure/zip.cljs","^@",34,"^A",7,"^B",34,"^C",14,"^D",["^E",["^F",["^E",[["^1:"]]]]],"^H","Returns a zipper for nested sequences, given a root sequence"],"^6","~$clojure.zip/seq-zip","^J",false,"^?","js/clojure/zip.cljs","^C",14,"^K",["^E",[["^1:"]]],"^L",null,"^M",["^E",[null,null]],"^A",1,"^@",34,"^B",34,"^N",1,"^O",true,"^D",["^E",["^F",["^E",[["^1:"]]]]],"^H","Returns a zipper for nested sequences, given a root sequence"],"~$insert-left",["^ ","^=",null,"^>",["^ ","^?","/home/xuelin/dev/cloudxmark/resources/public/js/clojure/zip.cljs","^@",165,"^A",7,"^B",165,"^C",18,"^D",["^E",["^F",["^E",[["^G","^Q"]]]]],"^H","Inserts the item as the left sibling of the node at this loc,\n without moving"],"^6","~$clojure.zip/insert-left","^J",false,"^?","js/clojure/zip.cljs","^C",18,"^K",["^E",[["^G","^Q"]]],"^L",null,"^M",["^E",[null,null]],"^A",1,"^@",165,"^B",165,"^N",2,"^O",true,"^D",["^E",["^F",["^E",[["^G","^Q"]]]]],"^H","Inserts the item as the left sibling of the node at this loc,\n without moving"],"~$prev",["^ ","^=",null,"^>",["^ ","^?","/home/xuelin/dev/cloudxmark/resources/public/js/clojure/zip.cljs","^@",221,"^A",7,"^B",221,"^C",11,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Moves to the previous loc in the hierarchy, depth-first. If already\n  at the root, returns nil."],"^6","~$clojure.zip/prev","^J",false,"^?","js/clojure/zip.cljs","^C",11,"^K",["^E",[["^G"]]],"^L",null,"^M",["^E",[null,null]],"^A",1,"^@",221,"^B",221,"^N",1,"^O",true,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Moves to the previous loc in the hierarchy, depth-first. If already\n  at the root, returns nil."],"~$right",["^ ","^=",null,"^>",["^ ","^?","/home/xuelin/dev/cloudxmark/resources/public/js/clojure/zip.cljs","^@",135,"^A",7,"^B",135,"^C",12,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Returns the loc of the right sibling of the node at this loc, or nil"],"^6","~$clojure.zip/right","^J",false,"^?","js/clojure/zip.cljs","^C",12,"^K",["^E",[["^G"]]],"^L",null,"^M",["^E",[null,null]],"^A",1,"^@",135,"^B",135,"^N",1,"^O",true,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Returns the loc of the right sibling of the node at this loc, or nil"],"~$lefts",["^ ","^=",null,"^>",["^ ","^?","/home/xuelin/dev/cloudxmark/resources/public/js/clojure/zip.cljs","^@",87,"^A",7,"^B",87,"^C",12,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Returns a seq of the left siblings of this loc"],"^6","~$clojure.zip/lefts","^J",false,"^?","js/clojure/zip.cljs","^C",12,"^K",["^E",[["^G"]]],"^L",null,"^M",["^E",[null,null]],"^A",1,"^@",87,"^B",87,"^N",1,"^O",true,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Returns a seq of the left siblings of this loc"],"~$xml-zip",["^ ","^=",null,"^>",["^ ","^?","/home/xuelin/dev/cloudxmark/resources/public/js/clojure/zip.cljs","^@",50,"^A",7,"^B",50,"^C",14,"^D",["^E",["^F",["^E",[["^1:"]]]]],"^H","Returns a zipper for xml elements (as from xml/parse),\n  given a root element"],"^6","~$clojure.zip/xml-zip","^J",false,"^?","js/clojure/zip.cljs","^C",14,"^K",["^E",[["^1:"]]],"^L",null,"^M",["^E",[null,null]],"^A",1,"^@",50,"^B",50,"^N",1,"^O",true,"^D",["^E",["^F",["^E",[["^1:"]]]]],"^H","Returns a zipper for xml elements (as from xml/parse),\n  given a root element"]],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^2",["~:ppath","~:zip/branch?","~:r","~:zip/children","~:content","~:l","~:zip/make-node","~:pnodes","~:changed?","~:end"]],"~:order",["^22","^23","^25","^24","^26","~:l","~:r","^21","^27","^28"]],"^H","Functional hierarchical zipper, with navigation, editing,\n  and enumeration.  See Huet"]